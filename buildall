#!/usr/bin/env bash

#
# The BSD 3-Clause License. http://www.opensource.org/licenses/BSD-3-Clause
#
# This file is part of 'MSYS2-Cross' project.
# Copyright (c) 2013 by Alexpux (alexpux@gmail.com)
# All rights reserved.
#
# Project: MSYS2-Cross ( https://github.com/Alexpux/MSYS2-Cross )
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# - Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# - Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the distribution.
# - Neither the name of the 'MSYS2-Cross' nor the names of its contributors may
#     be used to endorse or promote products derived from this software
#     without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# **************************************************************************

MSYS2_CROSS_VERSION="MSYS2-Cross-0.0.1"
BUG_URL=https://github.com/Alexpux/MSYS2-Cross

ORIGINAL_PATH=$PATH
LOGVIEWER="c:/progra~2/notepad++/notepad++.exe"
SHOW_LOG_ON_ERROR=yes

pushd $SYSTEMROOT > /dev/null
WIN_SYS=`pwd`
popd > /dev/null

WINDOWS_PART_PATH=$WIN_SYS/system32:$WIN_SYS
MSYS_PART_PATH=.:/usr/local/bin:/bin
export PATH=$MSYS_PART_PATH:$WINDOWS_PART_PATH

# directories
TOP_DIR=`pwd`
PREFIX_TOP=/c/crosstools
SRC_DIR=${TOP_DIR}/src
MARKERS_DIR=${SRC_DIR}/markers
PATCH_DIR=${TOP_DIR}/patches
PACKAGE_DIR=${TOP_DIR}/packages
SCENARIOS=${TOP_DIR}/scenarios
ROOT_DIR=${TOP_DIR}/work
UNPACK_DIR=${ROOT_DIR}/sources
TOOLCHAINS_DIR=${TOP_DIR}/toolchains

x32_HOST_MINGW_PATH=${TOOLCHAINS_DIR}/mingw32
x64_HOST_MINGW_PATH=${TOOLCHAINS_DIR}/mingw64

# MinGW-w64 toolchain links
URL_MINGW32=http://sourceforge.net/projects/mingwbuilds/files/host-windows/releases/4.7.2/32-bit/threads-posix/sjlj/x32-4.7.2-release-posix-sjlj-rev8.7z
URL_MINGW64=http://sourceforge.net/projects/mingwbuilds/files/host-windows/releases/4.7.2/64-bit/threads-posix/sjlj/x64-4.7.2-release-posix-sjlj-rev8.7z

# Build Flags
MAKE_OPTS="-j3"
STATIC_LINK_FLAGS="--enable-static --disable-shared"
SHARED_LINK_FLAGS="--enable-shared --disable-static"

# How to link dependencies
LNKDEPS=$SHARED_LINK_FLAGS
STATIC_DEPS=no

source versions.sh

RUN_ARGS="$@"
[[ $# == 1 && $1 == --help	|| $[ $# == 0 ] == 1 ]] && {
	echo "usage:"
	echo "  ./${0##*/} <x32|x64> [OPTIONS]"
	echo "  help:"
	echo "    --buildroot=<path>      - specifies the build root directory"
	echo "                              Default is <SCRIPTS_DIR>/work"
	echo "    --install-top           - specifies the top installation directory"
	echo "                              Default is C:/crosstools/cross-msys-gcc-$GCC_VERSION"
	echo "    --version               - pring the version of the MSYS2-Cross scripts"

	exit 0
}

mkdir -p $SRC_DIR $MARKERS_DIR $TOOLCHAINS_DIR

export INSTALL=/bin/install

source helpers_functions.sh

[[ -d /mingw ]] && {
	die "please remove \"/mingw\" directory. terminate."
}

[[ -n $(which "gcc.exe" 2>/dev/null) || \
	-n $(which "i686-pc-mingw32-gcc.exe" 2>/dev/null) || \
	-n $(which "i686-w64-mingw32-gcc.exe" 2>/dev/null) || \
	-n $(which "x86_64-w64-mingw32-gcc.exe" 2>/dev/null) \
]] && {
	die "remove from PATH any existing MinGW directory. terminate."
}

while [[ $# > 0 ]]; do
	case $1 in
		--buildroot=*)
			ROOT_DIR=${1/--buildroot=/}
			ROOT_DIR=${ROOT_DIR//:/:\/}
			ROOT_DIR=${ROOT_DIR//\/\//\/}
			
			mkdir -p ${ROOT_DIR} || die "Incorrect directory ${ROOT_DIR}"
			pushd ${ROOT_DIR} > /dev/null
			ROOT_DIR=`pwd`
			popd > /dev/null
		;;
		--install-top=*)
			PREFIX_TOP=${1/--install-top=/}
			PREFIX_TOP=${PREFIX_TOP//:/:\/}
			PREFIX_TOP=${PREFIX_TOP//\/\//\/}
			
			mkdir -p ${PREFIX_TOP} || die "Incorrect directory ${PREFIX_TOP}"
			pushd ${PREFIX_TOP} > /dev/null
			PREFIX_TOP=`pwd`
			popd > /dev/null
		;;
		--version) echo $MSYS2_CROSS_VERSION; exit 0 ;;
		x32)
			[[ ${BUILD_ARCHITECTURES[@]} =~ x32 ]] && { shift; continue; }
			BUILD_ARCHITECTURES=( ${BUILD_ARCHITECTURES[@]} x32 )
		;;
		x64)
			[[ ${BUILD_ARCHITECTURES[@]} =~ x64 ]] && { shift; continue; }
			BUILD_ARCHITECTURES=( ${BUILD_ARCHITECTURES[@]} x64 )
		;;
		
		*)
			echo "bad command line: \"$1\""
			die "terminate."
		;;
	esac
	shift
done		

[[ ${#BUILD_ARCHITECTURES[@]} > 2 || ${#BUILD_ARCHITECTURES[@]} == 0 || \
	${BUILD_ARCHITECTURES[0]} == ${BUILD_ARCHITECTURES[1]} ]] && {
	die "error in build architectures(${BUILD_ARCHITECTURES[@]}). terminate."
}

[[ $(env | grep PROCESSOR_ARCHITEW6432) =~ AMD64 ]] && {
	IS_64BIT_HOST=yes
} || {
	IS_64BIT_HOST=no
}

[[ $IS_64BIT_HOST == no && ${BUILD_ARCHITECTURES[@]} =~ x64 ]] && {
	die "you can't build 64-bit programs using 32-bit OS. terminate."
}

toolchains_prepare

[[ ! -d $x32_HOST_MINGW_PATH || ! -d $x64_HOST_MINGW_PATH ]] && {
	die "Host toolchains is not installed. Terminate!"
}

[[ ! -f /usr/bin/shilka.exe ]] && {
	cp -f $TOP_DIR/extra/shilka.exe /usr/bin/
}

source package_order.sh

for ARCHITECTURE in ${BUILD_ARCHITECTURES[@]}; do

	PREFIX=${PREFIX_TOP}/cross-msys-gcc-$GCC_VERSION
	BUILD_DIR=${ROOT_DIR}/build-$ARCHITECTURE
	LOG_DIR=${ROOT_DIR}/logs-$ARCHITECTURE

	[[ $ARCHITECTURE == x32 ]] && {
		HOST=i686-w64-mingw32
		BUILD=i686-w64-mingw32
		TARGET=i686-pc-msys
		OPTIM="-march=i686 -mtune=core2"
	} || {
		HOST=x86_64-w64-mingw32
		BUILD=x86_64-w64-mingw32
		TARGET=x86_64-pc-msys
		OPTIM="-march=nocona -mtune=core2"
	}

	[[ ! -f $x32_HOST_MINGW_PATH/bin/gcc.exe ]] && {
			die "gcc.exe is not exists in the \"$x32_HOST_MINGW_PATH/bin\" directory. terminate."
	}

	[[ ! -f $x64_HOST_MINGW_PATH/bin/gcc.exe ]] && {
			die "gcc.exe is not exists in the \"$x64_HOST_MINGW_PATH/bin\" directory. terminate."
	}

	mkdir -p $BUILD_DIR $LOG_DIR $PREFIX

	export PATH=$PREFIX/bin:$x32_HOST_MINGW_PATH/bin:$x64_HOST_MINGW_PATH/bin:$MINGW_PART_PATH:$MSYS_PART_PATH:$WINDOWS_PART_PATH

	HOST_CFLAGS="$OPTIM -pipe -O2 -fomit-frame-pointer"
	HOST_CXXFLAGS="${HOST_CFLAGS}"
	HOST_CPPFLAGS="-I${PREFIX}/include"
	HOST_LDFLAGS="-pipe -s -L${PREFIX}/lib"

	echo "-> Start building"

	for sub in ${PACKAGES[@]}; do
		echo -e "-> \E[32;40m$sub\E[37;40m"
		[[ ! -f $SCENARIOS/$sub.sh ]] && {
			die "script for subtarget \"$sub\" is not exists. terminate."
		}

		source ${SCENARIOS}/${sub}.sh

		src_download
		src_unpack
		src_patch
		src_configure
		pkg_build
		pkg_install

	done

done

